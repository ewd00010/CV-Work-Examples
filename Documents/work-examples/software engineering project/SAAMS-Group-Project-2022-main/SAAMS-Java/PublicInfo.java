
// Generated by Together


import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;

/**
 * An interface to SAAMS:
 * Public Information Screen:
 * Display of useful information about aircraft.
 * This class registers as an observer of the AircraftManagementDatabase, and is notified whenever any change occurs in that <<model>> element.
 * See written documentation.
 *
 * @stereotype boundary/view
 * @url element://model:project::SAAMS/design:view:::id28ykdcko4qme4cko4sx0e
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 */
public class PublicInfo extends JFrame
        implements Observer, ActionListener {
  /**
   * Each Public Information Screen interface has access to the AircraftManagementDatabase.
   *
   * @supplierCardinality 1
   * @clientCardinality 0..*
   * @label accesses/observes
   * @directed
   */

  private AircraftManagementDatabase AMDatabase;
    //GUI elements
    //headers used in the table
    private String[] tableHeaders = {"Flight Code", "Departure", "Destination", "Status", "Gate"};
    private JPanel layoutPanel;
    //instead of a list, we use a table because there's a lot of data per line
    private JTable infoTable;

public PublicInfo(AircraftManagementDatabase amd) {
     super("Public info screen"); //instantiates itself as a JFrame
    setupGUI();

    this.AMDatabase = amd;
    amd.addObserver(this);
  }

    /**
     * used to set up the table for the first time and then remake it every time there's an update
     * @param data the data to be put in the new table, as a matrix of Strings
     */
    public void setupInfoTable(String[][] data) {
        layoutPanel.removeAll();
        infoTable = new JTable(data, tableHeaders);
        infoTable.setBackground(new Color(230, 247, 239));
        infoTable.getTableHeader().setBackground(Color.LIGHT_GRAY);
        infoTable.setDefaultEditor(Object.class, null);
        layoutPanel.add(new JScrollPane(infoTable));
    }

    /**
     * sets up the GUI elements for when the constructor is called
     * note that this doesn't contain super(title), for some reason it's not allowed.
     */
    public void setupGUI() {
        int tableWidth = 400, tableHeight = 300;
        this.setSize(tableWidth+10, tableHeight+10);
        layoutPanel = new JPanel(new GridLayout(1, 2, 10, 10));
        this.setContentPane(layoutPanel);
        String[][] initialData = new String[][]{}; //initially the table is empty
        setupInfoTable(initialData);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setVisible(true);

    }

    /**
     * for a given MR, it converts it into the strings that can be displayed in the table.
     * It shows the MR's flightCode, departure location, destination, and status report
     * Note that the status, if it's boarding, will also say "Boarding at gate X"
     * @param mr the MR to be converted
     * @return an array of length 4 of strings, representing flightCode, departure, destination, status
     */
    private String[] getMRPublicInfoRow(ManagementRecord mr) {
        String flightCode = mr.getFlightCode();
        String from = mr.getItinerary().getFrom();
        String to = mr.getItinerary().getTo();
        String status = mr.getStatusAsString();
        String gate = "";

        return new String[] {flightCode, from, to, status, gate};
    }



    /**
     * refreshes the GUI, in this case the table will be repopulated with the relevant airplanes
     */
    public void updateGUI() {
        ManagementRecord MR = new ManagementRecord();
        ManagementRecord[] relevantMRs =
                AMDatabase.getWithStatuses(  //TODO: which of these can be excluded?
                        // MR.AWAITING_TAKEOFF,
                    MR.AWAITING_TAXI,
                    MR.AWAIT_REPAIR,
                    MR.CLEAN_AWAIT_MAINT,
                    MR.FAULTY_AWAIT_CLEAN,
                    MR.LANDED,
                    MR.LANDING,
                    MR.OK_AWAIT_CLEAN,
                    MR.READY_CLEAN_AND_MAINT,
                    MR.READY_DEPART,
                    MR.READY_PASSENGERS,
                    MR.READY_REFUEL,
                    MR.TAXIING,
                    MR.UNLOADING,
                    MR.WANTING_TO_LAND,
                    MR.IN_TRANSIT);

    //update the GUI

        String[][] rowsOfInfoTable = new String[relevantMRs.length][];
        for (int i=0;i<relevantMRs.length;i++)
            rowsOfInfoTable[i] = getMRPublicInfoRow(relevantMRs[i]);
        setupInfoTable(rowsOfInfoTable);
  }

  @Override
  public void update(Observable observable, Object o) {
    updateGUI();
    validate();
    repaint();
  }

  @Override
  public void actionPerformed(ActionEvent actionEvent) {
        //nothing to do
  }

}
