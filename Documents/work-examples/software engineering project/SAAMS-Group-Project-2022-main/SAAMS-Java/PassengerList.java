// Generated by Together
import java.util.ArrayList;

/**
 * Contains an array of PassengerDetails objects - one per passenger on a flight.
 * Incoming flights supply their passenger list in their flight descriptor, and the ManagementRecord for the flight extracts the PassengerList and holds it separately.
 * Outbound flights have PassengerLists built from passenger details supplied by the gate consoles, and the list is uploaded to the aircraft as it departs in a newly built FlightDescriptor.
 * @stereotype entity
 * @url element://model:project::SAAMS/design:view:::id1un8dcko4qme4cko4sw27
 * @url element://model:project::SAAMS/design:view:::id1jkohcko4qme4cko4svww
 */
public class PassengerList {
  /**
 * The array of PassengerDetails objects.
 * @byValue
 * @clientCardinality 1
 * @directed true
 * @label contains
 * @shapeType AggregationLink
 * @supplierCardinality 0..*
 */
  private ArrayList<PassengerDetails> details;

/**
 * Helper function to add a passenger to the list.
 * This is used in temporary lists in the GUI and when boarding
 * @param passenger the passenger to be added
 */
  public void addPassenger(PassengerDetails passenger){
     details.add(passenger);
  }

  public PassengerList() {
      this.details = new ArrayList<PassengerDetails>(0);
  }
  public PassengerList(PassengerList passengerListToBeCopied) {
      details = new ArrayList<>(passengerListToBeCopied.details); //this constructor copied the old array
  }

  public void clear(){
      this.details.clear();
  }

  public boolean isEmpty() {return details.isEmpty();}

    /**
     * Helper for GUI lists which have to show passengers
      * @return an array of Strings
     */
  public String[] asStringArray() {
    String[] result = new String[details.size()];
    for (int i=0; i< details.size();i++)
        result[i] = details.get(i).getName();
    return result;
  }


  public boolean equals(Object o) {
      System.out.println("called pl.equals");

      if (o == this) return true;
      if (!(o instanceof PassengerList)) return false;
      PassengerList pl = (PassengerList) o;

      boolean allEqual = true;
      if (pl.details.size() != this.details.size())
          return false;

      for (int i=0;i<pl.details.size();i++)
          allEqual &= (this.details.get(i).getName().equals(pl.details.get(i).getName()));
      return allEqual;
  }

  public ArrayList<PassengerDetails> getDetails() {
      return details;
  }
}
